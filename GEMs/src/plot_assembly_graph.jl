using Pkg
if basename(pwd()) != "src"
    cd("C:/Users/jeppe/OneDrive/Documenten/Bioinformatics/Tweede master/Master Thesis/Assembly_Theory/GEMs/src")
end
Pkg.activate(".")

using Graphs
using GraphPlot
using Colors
using Printf
using MolecularGraph

function generate_mol(vertices, edges, atom_symbols, bond_types)

    mol_lines = [
        "Generated by Julia",  # Line 1: name
        "",                    # Line 2: program/date line (blank for now)
        "",                    # Line 3: comments
    ]

    # Atom and bond counts
    atom_count = length(vertices)
    bond_count = length(edges)
    header = @sprintf("%3d%3d  0  0  0  0            999 V2000", atom_count, bond_count)
    push!(mol_lines, header)

    # Map original vertex IDs to 1-based indices
    vmap = Dict(v => i for (i, v) in enumerate(vertices))

    # Dummy coordinates (arranged on a grid)
    for (i, symbol) in enumerate(atom_symbols)
        x, y, z = i * 1.5, 1.0, 1.0
        atom_line = @sprintf("%10.4f%10.4f%10.4f %-3s 0  0  0  0  0  0  0  0  0  0  0  0", x, y, z, symbol)
        push!(mol_lines, atom_line)
    end

    # Bond type mapping
    bond_map = Dict("single" => 1, "double" => 2, "triple" => 3)

    # Bonds
    for (i, edge) in enumerate(edges)
        a1 = vmap[edge[1]]
        a2 = vmap[edge[2]]
        bond_type = bond_map[bond_types[i]]
        bond_line = @sprintf("%3d%3d%3d  0  0  0  0", a1, a2, bond_type)
        push!(mol_lines, bond_line)
    end

    push!(mol_lines, "M  END")

    return join(mol_lines, "\n")
end

vertices = [1, 4, 8, 10, 11, 12, 13]
edges = [[1 4], [4 8], [8 10], [8 11], [11 12], [11 13]]
vertex_colours = ["C", "C", "C", "N", "C", "O", "O"]
edge_colours = ["single", "single", "single", "single", "single", "double"]

mol_string = generate_mol(vertices, edges, vertex_colours, edge_colours)
svgstring = drawsvg(sdftomol(IOBuffer(mol_string)))

display("image/svg+xml", svgstring)
